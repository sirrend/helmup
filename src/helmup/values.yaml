# NOTE: The application expects a k8s secret "helmup-secret" with the following keys:
# ["openai_token", "github_token", "jira_token", "webhook_url")Optional ]
# We provided a convinient way to use ExternSecrets application to retreive them. If used externally, make sure to create a secret named "helmup-secret" with these keys: ["openai_token", "github_token", "jira_token", "webhook_url")Optional ]
global:
  # -- If using a self-defined secret, specify its name
  secretNameOverride: ""
  externalSecret:
    # -- Required: Support for external secrets operator: Enables/Disables externalSecret to be imported to the namespace. Conflicts with "secretNameOverride"
    enabled: true
    # -- Specify the secretStoreRef
    secretStoreRef:
      name: aws-secrets-manager
      kind: ClusterSecretStore
    # -- Specify the secretStoreRef, e.g., secretsManager for AWS Secrets Manager
    backendType: secretsManager 
    # -- The secret name to pull from SecretStore for the openAI chatgpt token
    secretKeyOpenAI: chatgpt-token 
    # -- The secret name to pull from SecretStore for the Github token
    secretKeyGithub: sirrend-github-token
    # -- The secret name to pull from SecretStore for the Jira token
    secretKeyJira: sirrend-jira-token
    # -- The secret name to pull from SecretStore for the notifications channel (slack/teams) webhhok url
    secretKeyNotificationsWebhookUrl: sirrend-slack-webhook-secret
    # -- Speficy the refresh interval for the secret
    refreshInterval: 30h
    # -- Optional
    secretVersion: "" 
    # -- externalSecret template
    secretTemplate:
      type: Opaque
      annotations: {}
      labels: {}
      data: {}  
  # This is the main section for how to config the helmup engine. Please read carefully. You may use Sirrend's official docs for this:
  # https://sirrend.github.io/sirrend-docs/
  appConfig:
    jira:
      # -- Required: Whether to enable jira notifications / tickets creation
      enabled: true
      # -- The jira server URL
      server_url: "https://sirrend.atlassian.net/"
      # -- The jira project key
      project_key: "SI"
      # -- Jira username
      username: "yuvalpress@gmail.com"
      # token: Either an externalSecret (See below) or a secret which is externally managed are is located in the cluster
      # Helmup will take this into consideration when upgrading k8s schemas - what is the target k8s version that the upgrade should adapt to
    target_kube_version: 1.30.0
    # -- Whether or not to upgrade major chart's versions
    upgrade_majors: "disabled" # Valid options are ["disabled", "enabled"]
    # -- Whether or not to improve the helm manifest using AI capabilities. Recommended!
    reformat_helm_templates: true
    notifications: 
      # -- Required: Whether or not to send notification via channels (slack or teams - as configured in the notifications section)
      enabled: true
      # -- Valid options are ["slack", "teams", "None"]
      type: "slack" 
    github:
      # -- Required: Github account / project name
      CUSTOMER_NAME: "sirrend"
      # -- Required: Github repo name
      GIT_REPOSITORY_NAME: "kuba_test"
      # -- Required: Github branch name to scrape
      GIT_BRANCH: "main"
      # -- Required: Github repository URL
      GIT_REPOSITORY_URL: "https://github.com/sirrend/kuba_test.git"

# Values for the helmup-engine application
# Description: This application runs as a deployment.
#              The purpose of this application, is to get a specific customer chart and look for a new version online.
#              In case there is a new version, which matches the conditions given by the user (for example - upgrade major versions), it creates a new PR with the values fix/
engine:
  nameOverride: "engine"
  fullnameOverride: ""
  # -- Number of engine pods to run
  replicaCount: 1

  image:
    # -- Repository for the helmup-engine image
    repository: sirrend/helmup-engine
    # -- imagePullPolicy - Highly recommended to leave this as Always
    pullPolicy: Always
    # -- The helmup-engine image tag to use
    tag: "0.1.13"

  # -- A list of image pull secret names to use
  imagePullSecrets: []

  serviceAccount:
    # -- If true, a service account will be created for the controller. If set to false, uses default serviceAccount
    create: true
    # -- If true, the service account will be mounted automatically
    automount: true
    # -- Extra annotations for the service account that will be created
    annotations: {}
    # -- The name of an existing service account to use for the controller
    name: ""

  service:
    # -- The type of the engine service
    type: ClusterIP
    # -- The port to run the dashboard engine on
    port: 80

  ingress:
    # -- Enables an ingress object for the application
    enabled: false
    # -- From Kubernetes 1.18+ this field is supported in case your ingress controller supports it. When set, you do not need to add the ingress class as annotation.
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []

  livenessProbe:
    enabled: true
    # -- Please do not change this
    path: /healthcheck
    port: 8090
    initialDelaySeconds: 15
    periodSeconds: 300
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    enabled: false
    # -- Please do not change this
    path: /healthcheck
    port: 8090
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  startupProbe:
    enabled: true
    # -- Please do not change this
    path: /healthcheck
    port: 8090
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  autoscaling:
    # If true, enable hpa for the engine service.
    enabled: false
    # -- Min number of pods to run
    minReplicas: 1
    # -- Max number of pods to run
    maxReplicas: 10
    # -- The threshold of CPU utilization to scale up upom 
    targetCPUUtilizationPercentage: 80

  # -- Extra volume mounts for the engine container
  volumes: []
  # -- Extra volumes for the engine pod
  volumeMounts: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # -- Extra annotations for the engine pod
  podAnnotations: {}
  podLabels: {}
  # -- Defines the podSecurityContext for the engine pod
  podSecurityContext: {}
  # -- The container securityContext for the controller container
  securityContext: {}
  # -- A resources block for the engine pod
  resources: {}

# Values for the helmup-notifications-service application
# Description: This application runs as a deployment.
#              The purpose of this application, is to run update the user via notifications in a given channel about the upgrade status.
#              Currently, we support only Slack and Microsoft Teams, via webhook channels.
#              Please insert a valid webhook url (via secret) using this config or externally. The app is expecting a secret with a key named "webhook_url".
notifications:
  # If true, a pod named helmup-notifications-service is created. It sends notifications about run statuses to slack / teams
  enabled: true
  nameOverride: "notifications-service"
  fullnameOverride: ""
  # -- Number of engine pods to run
  replicaCount: 1

  image:
    # -- Repository for the helmup-notifications-service image
    repository: sirrend/helmup-notifications-service
    # -- The helmup-github-scraper image tag to use
    tag: "0.1.3"
    # -- imagePullPolicy - Highly recommended to leave this as Always
    pullPolicy: Always

  # -- A list of image pull secret names to use
  imagePullSecrets: []

  service:
    # -- The type of the engine service
    type: ClusterIP
    # -- The port to run the dashboard engine on
    port: 80

  serviceAccount:
    # -- If true, a service account will be created for the controller. If set to false, uses default serviceAccount
    create: true
    # -- If true, the service account will be mounted automatically
    automount: true
    # -- Extra annotations for the service account that will be created
    annotations: {}
    # -- The name of an existing service account to use for the controller
    name: ""

  livenessProbe:
    enabled: true
    # -- Please do not change this
    path: /health
    port: 9000
    initialDelaySeconds: 15
    periodSeconds: 300
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    enabled: false
    # -- Please do not change this
    path: /health
    port: 9000
    initialDelaySeconds: 20
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 3

  startupProbe:
    enabled: false
    # -- Please do not change this
    path: /health
    port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  # -- Extra volume mounts for the notifications container
  volumes: []
  # -- Extra volumes for the notifications pod
  volumeMounts: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # -- Extra annotations for the notifications pod
  podAnnotations: {}
  podLabels: {}
  # -- Defines the podSecurityContext for the notifications pod
  podSecurityContext: {}
  # -- The container securityContext for the controller container
  securityContext: {}
  # -- A resources block for the notifications pod
  resources: {}

# Values for the helmup-github-scraper application
# Description: This application runs as a cronjob.
#              The purpose of this application, is to run on interval (e.g. daily) and scan the given Github repo.
#              Once the application recognizes a helm chart in the repo, it then triggers the helmup-engine application which upgrades the chart.
scraper:
  nameOverride: "github-scraper"
  fullnameOverride: ""
  # -- Number of engine pods to run
  replicaCount: 1
  # -- Required: the cronJob expressions to scrape the git repo
  cronJobExpression: "0 0 * * *"
  # -- Required: successful job history limit
  successfulJobsHistoryLimit: 3
  # -- Required: failed job history limit
  failedJobsHistoryLimit: 1

  image:
    # -- Repository for the helmup-github-scraper image
    repository: sirrend/helmup-github-scraper
    # -- imagePullPolicy - Highly recommended to leave this as Always
    pullPolicy: Always
    # -- The helmup-github-scraper image tag to use
    tag: "0.1.4"

  # -- A list of image pull secret names to use
  imagePullSecrets: []

  serviceAccount:
    # -- If true, a service account will be created for the controller. If set to false, uses default serviceAccount
    create: true
    # -- If true, the service account will be mounted automatically
    automount: true
    # -- Extra annotations for the service account that will be created
    annotations: {}
    # -- The name of an existing service account to use for the controller
    name: ""

  # -- Extra volume mounts for the scraper container
  volumes: []
  # -- Extra volumes for the scraper pod
  volumeMounts: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # -- Extra annotations for the scraper pod
  podAnnotations: {}
  podLabels: {}
  # -- Defines the podSecurityContext for the scraper pod
  podSecurityContext: {}
  # -- The container securityContext for the scraper container
  securityContext: {}
  # -- A resources block for the scraper pod
  resources: {}


